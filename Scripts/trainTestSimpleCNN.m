function [p] = trainTestSimpleCNN(Xtrain,Ttrain,Xtest,Ttest,regularisation,bedSize)
% Select the data
X4D    = reshape(Xtrain',bedSize(1),bedSize(2),1,size(Xtrain,1));
X4Dval = reshape(Xtest',bedSize(1),bedSize(2),1,size(Xtest,1));

% Set up the network topology and training options
layers = [ ...
    imageInputLayer([bedSize(1:2) 1])

    % Padded with ones because empty bed contains ones
    convolution2dLayer(3,6,...
    'Padding',[0 0 0 1],...
    'PaddingValue',1,...
    'Stride',1,...
    'WeightsInitializer','narrow-normal') % Stride 2 when used without pooling layer
    tanhLayer
    maxPooling2dLayer(2,'Stride',1)

    convolution2dLayer(3,7,'Padding',[0 0 0 1]...
    ,'Stride',1 ...
    ,'WeightsInitializer','narrow-normal') % Stride 2 when used without pooling layer
    tanhLayer
    maxPooling2dLayer(2,'Stride',2)

    fullyConnectedLayer(4)
    softmaxLayer
    classificationLayer];
    
options = trainingOptions('adam' ...
    ,'MaxEpochs',6e2...
    ,'InitialLearnRate',0.01 ...
    ,'L2Regularization',regularisation ...
    ,'MiniBatchSize',128 ...
    ,'GradientDecayFactor',0.8 ...
    ,'Verbose',false ...
    ...,'ValidationData',{X4Dval,categorical(Ttest)} ... % Fails due to missing outputs
    ...,'Plots','training-progress'...
    ...,'ExecutionEnvironment','gpu' ...
    );
net = trainNetwork(X4D,categorical(Ttrain),layers,options);

p=classify(net,X4Dval ...
    ...,'ExecutionEnvironment','cpu' ...
    );
end